rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      // Allow users to read their own document (even when banned)
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to write their own document (but not when banned)
      allow write: if request.auth != null && request.auth.uid == userId && 
        resource.data.status != 'banned';
      
      // Allow reading basic profile info for all authenticated users
      // This enables profile picture recovery in conversations and is safe
      // since only basic profile information (name, profile picture) is exposed
      allow read: if request.auth != null;
      
      // Allow admins to update user status (for banning/unbanning)
      allow update: if request.auth != null && isAdmin();
    }
    
    // User bans collection - only admins can access
    match /userBans/{banId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Posts collection rules
    match /posts/{postId} {
      // Only non-banned users can read posts
      allow read: if request.auth != null && !isUserBanned();
      
      // Only non-banned users can create posts
      allow create: if request.auth != null 
        && request.auth.uid != null
        && !isUserBanned()
        && isValidPost(request.resource.data);
      
      // Users can update their own posts (but not when banned)
      allow update: if request.auth != null 
        && request.auth.uid != null
        && !isUserBanned()
        && resource.data.user.email == request.auth.token.email;
      
      // Users can delete their own posts, or admins can delete any post
      allow delete: if request.auth != null 
        && (resource.data.user.email == request.auth.token.email || isAdmin());
    }
    
    // SIMPLIFIED: Conversations collection for messaging
    match /conversations/{conversationId} {
      // Only non-banned users can read conversations
      allow read: if request.auth != null && !isUserBanned();
      
      // Users can write conversations they participate in (but not when banned)
      allow write: if request.auth != null && 
        !isUserBanned() &&
        request.auth.uid in resource.data.participants;
      
      // Allow creating new conversations (but not when banned)
      allow create: if request.auth != null && !isUserBanned();
      
      // Allow deleting conversations when deleting posts (post owner can delete related conversations)
      // Also allow any authenticated user to delete conversations for cleanup (simplified for reliability)
      allow delete: if request.auth != null && !isUserBanned();
      
      // Messages subcollection - RESTRICTED deletion
      match /messages/{messageId} {
        // Users can read messages in conversations they participate in
        allow read: if request.auth != null && 
          !isUserBanned() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Users can create messages in conversations they participate in
        allow create: if request.auth != null && 
          !isUserBanned() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Users can ONLY delete their own messages
        allow delete: if request.auth != null && 
          !isUserBanned() && 
          resource.data.senderId == request.auth.uid;
        
        // Users can update their own messages (for editing)
        allow update: if request.auth != null && 
          !isUserBanned() && 
          resource.data.senderId == request.auth.uid;
      }
    }
    
    // Helper functions
    function isValidPost(data) {
      return data.keys().hasAll(['title', 'description', 'category', 'location', 'type', 'user', 'status'])
        && data.type in ['lost', 'found']
        && data.status in ['pending', 'resolved', 'rejected']
        && data.title is string && data.title.size() > 0
        && data.description is string && data.description.size() > 0
        && data.category is string && data.category.size() > 0
        && data.location is string && data.location.size() > 0
        && data.user.email == request.auth.token.email;
    }
    
    function isAdmin() {
      // Add more admin emails as needed
      return request.auth.token.email in ['admin@ustp.edu.ph', 'superadmin@ustp.edu.ph','admin@uniclaim.com'];
    }
    
    // NEW: Check if current user is banned
    function isUserBanned() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'banned';
    }
  }
}
