rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // NOTE: Conversations and messages read permissions simplified to fix new user permission errors
    // Users can now read conversations and messages as long as they're authenticated
    // Write permissions still maintain security by checking user participation and ban status
    
    // Users can read and write their own user document
    match /users/{userId} {
      // Allow users to read their own document (for ban checking and profile access)
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow reading basic profile info for messaging functionality
      // This enables conversations to display participant names and profile pictures
      // Simplified: Allow reading user profiles for messaging (fixes ban listener permission error)
      allow read: if request.auth != null;

      // Allow admins to read all users (for admin panel)
      allow read: if request.auth != null && isAdmin();

      // Allow users to create their own document during registration
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow email verification updates for authenticated users
      // This allows users to update their emailVerified status during verification
      allow update: if request.auth != null && request.auth.uid == userId &&
        (resource.data.status == null || (resource.data.status != 'deactivated' && resource.data.status != 'banned')) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['emailVerified', 'updatedAt']);

      // Allow push token updates for authenticated users (for notification setup)
      allow update: if request.auth != null && request.auth.uid == userId &&
        (resource.data.status == null || (resource.data.status != 'deactivated' && resource.data.status != 'banned')) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['pushToken', 'pushTokenUpdatedAt']);

      // Allow profile updates for authenticated users (for profile editing)
      // Users can update their basic profile information
      allow update: if request.auth != null && request.auth.uid == userId;

      // Allow users to delete their own document (for account deletion)
      // Simplified rule - users can always delete their own document
      allow delete: if request.auth != null && request.auth.uid == userId;

      // Allow admins to update user status (for banning/unbanning)
      allow update: if request.auth != null && isAdmin();
    }

    // User bans collection - only admins can access
    match /userBans/{banId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Posts collection rules
    match /posts/{postId} {
      // Allow authenticated users to read posts (temporarily simplified for debugging)
      allow read: if request.auth != null;

      // Allow authenticated users to create posts (temporarily simplified for debugging)
      // Also allow creation when restoring a post (admin operation)
      allow create: if (request.auth != null
        && request.auth.uid != null
        && isValidPost(request.resource.data)) || 
        (request.auth != null && isAdmin() && request.resource.data.isRestored == true);

      // Users can update their own posts, OR admins can update any post
      // FIXED: Case-insensitive email comparison to handle different cases
      // Allow new users to update their posts before email verification
      allow update: if request.auth != null
        && request.auth.uid != null
        && (resource.data.user.email.lower() == request.auth.token.email.lower() || isAdmin() || isNewUser());
      
      // Allow any authenticated user to flag posts (for flagging system)
      // This allows users to add/update flagging fields on any post
      allow update: if request.auth != null
        && request.auth.uid != null
        && request.resource.data.keys().hasAny(['isFlagged', 'flagReason', 'flaggedBy', 'flaggedAt', 'isHidden']);

      // Users can delete their own posts, or admins can delete any post
      // FIXED: Case-insensitive email comparison for consistency
      // Allow new users to delete their own posts
      allow delete: if request.auth != null
        && (resource.data.user.email.lower() == request.auth.token.email.lower() || isAdmin() || isNewUser());
    }
    
    // SIMPLIFIED: Conversations collection for messaging
    match /conversations/{conversationId} {
      // Simplified: Allow any authenticated user to read conversations
      // This fixes the permission error for new users while maintaining security
      allow read: if request.auth != null;

      // Users can write conversations they participate in (but not when banned)
      // Admins have full write access
      allow write: if request.auth != null &&
        (request.auth.uid in resource.data.participants || isAdmin());

      // Allow creating new conversations (but not when banned)
      // Admins can always create conversations
      allow create: if request.auth != null;

      // Allow deleting conversations when deleting posts (post owner can delete related conversations)
      // Also allow any authenticated user to delete conversations for cleanup (simplified for reliability)
      // Admins have full delete access
      allow delete: if request.auth != null && (!isUserBanned() || isAdmin());
      
      // Messages subcollection - RESTRICTED deletion
      match /messages/{messageId} {
        // Simplified: Allow any authenticated user to read messages
        // This fixes the permission error for new users while maintaining security
        allow read: if request.auth != null;

        // Users can create messages in conversations they participate in (admins have full access)
        allow create: if request.auth != null &&
          (request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants || isAdmin());

        // Users can ONLY delete their own messages (admins can delete any message)
        allow delete: if request.auth != null &&
          (resource.data.senderId == request.auth.uid || isAdmin());

        // Allow deleting messages when cleaning up conversations for deleted posts
        // This enables proper cleanup when posts are deleted (admins have full access)
        allow delete: if request.auth != null &&
          (request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants || isAdmin());

        // Users can update their own messages (for editing) (admins can update any message)
        allow update: if request.auth != null &&
          (resource.data.senderId == request.auth.uid || isAdmin());

        // Allow updating messages for claim responses - users can respond to claim requests
        // in conversations they participate in, even if they're not the original sender
        // Admins can update any claim responses
        allow update: if request.auth != null &&
          (request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants || isAdmin()) &&
          // Only allow updates to claimData field for claim responses
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['claimData']);

        // Allow updating messages for handover responses - users can respond to handover requests
        // in conversations they participate in, even if they're not the original sender
        // Admins can update any handover responses
        allow update: if request.auth != null &&
          (request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants || isAdmin());
      }
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;

      // Users can update their own notifications (for marking as read)
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;

      // Users can delete their own notifications, OR admins can delete any notifications for cleanup
      allow delete: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());

      // Allow creating notifications (for the notification sender service)
      // This allows any authenticated user to create notifications
      allow create: if request.auth != null;

      // Admins can read and manage all notifications
      allow read, write: if request.auth != null && isAdmin();

      // Allow querying notifications by userId for limit enforcement
      // This is needed for the enforceNotificationLimit function
      allow list: if request.auth != null;
    }
    
    // Admin notifications collection rules
    match /admin_notifications/{notificationId} {
      // Temporarily allow all authenticated users to read admin notifications (for debugging)
      // TODO: Restrict to admins only once admin user is properly set up
      allow read: if request.auth != null;
      
      // Temporarily allow all authenticated users to update admin notifications (for debugging)
      // TODO: Restrict to admins only once admin user is properly set up
      allow update: if request.auth != null;
      
      // Temporarily allow all authenticated users to delete admin notifications (for debugging)
      // TODO: Restrict to admins only once admin user is properly set up
      allow delete: if request.auth != null;
      
      // Allow creating admin notifications (for the notification system)
      // This allows any authenticated user to create admin notifications (needed for post creation)
      allow create: if request.auth != null;
    }
    
    // Admin notification preferences collection rules
    match /admin_notification_preferences/{adminId} {
      // Only admins can read and write their own preferences
      allow read, write: if request.auth != null && isAdmin() && request.auth.uid == adminId;
      
      // Allow creating preferences for new admins
      allow create: if request.auth != null && isAdmin() && request.auth.uid == adminId;
    }
    
    // Deleted posts collection (admin only)
    match /deleted_posts/{postId} {
      // Allow admins to read and manage deleted posts
      allow read, write: if request.auth != null && isAdmin();
      
      // Allow creating deleted posts (for soft delete functionality)
      allow create: if request.auth != null;
      
      // Allow reading specific post for restoration
      allow get: if request.auth != null && isAdmin();
      
      // Allow deleting when restoring a post
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Notification subscriptions collection rules
    match /notifications_subscriptions/{userId} {
      // Users can read and write their own subscription
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow creating subscriptions (for new user registration)
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow reading subscriptions for notification queries (for notification sender)
      allow read: if request.auth != null;
      
      // Admins can read and manage all subscriptions
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Analytics collection rules - allow authenticated users to read analytics data
    match /analytics/{analyticsId} {
      // Allow authenticated users to read analytics data
      allow read: if request.auth != null;

      // Allow creating analytics data (for post creation logging)
      allow create: if request.auth != null;

      // Allow updating analytics data (for incrementing counters)
      allow update: if request.auth != null;
    }
    function isValidPost(data) {
      return data.keys().hasAll(['title', 'description', 'category', 'location', 'type', 'user', 'status'])
        && data.type in ['lost', 'found']
        && data.status in ['pending', 'resolved', 'unclaimed']
        && data.title is string && data.title.size() > 0
        && data.description is string && data.description.size() > 0
        && data.category is string && data.category.size() > 0
        && data.location is string && data.location.size() > 0
        && (data.user.email == request.auth.token.email || data.user.email == 'cs@uniclaim.com' || isNewUser());
    }
    
    function isNewUser() {
      // Check if user exists in database and if their email is verified
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        !get(/databases/$(database)/documents/users/$(request.auth.uid)).data.emailVerified;
    }
    
    function isAdmin() {
      // Check both email-based admin list and role-based admin status
      return request.auth != null && (
        request.auth.token.email in ['admin@ustp.edu.ph', 'superadmin@ustp.edu.ph','admin@uniclaim.com', 'cs@uniclaim.com'] ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
    }
    
    // NEW: Check if current user is banned
    function isUserBanned() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'deactivated' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'banned');
    }
    
    
  }
}
